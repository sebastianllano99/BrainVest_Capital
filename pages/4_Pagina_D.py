import streamlit as st
import pandas as pd

st.set_page_config(page_title="Simulaci√≥n de Resultados", layout="wide")

st.title("Resultados de la Simulaci√≥n")
st.write("Cada grupo puede subir sus resultados aqu√≠ y verlos. "
         "‚ö†Ô∏è Sus datos se borrar√°n autom√°ticamente al cerrar la pesta√±a o reiniciar la app.")

# -----------------------------
# Inicializar sesi√≥n
# -----------------------------
if "resultados" not in st.session_state:
    st.session_state.resultados = pd.DataFrame()

# -----------------------------
# Subida de CSV
# -----------------------------
archivo = st.file_uploader("Sube tu archivo CSV con resultados", type=["csv"])

if archivo is not None:
    df = pd.read_csv(archivo)
    
    columnas = [
        "Grupo","RentabilidadAnualizada","Riesgo","Sharpe",
        "DiasArriba","DiasAbajo","GananciaPromArriba",
        "PerdidaPromAbajo","GananciaTotal"
    ]
    
    if all(col in df.columns for col in columnas):
        st.success("‚úÖ Archivo v√°lido")
        st.dataframe(df)

        if st.button("Subir"):
            st.session_state.resultados = df.copy()
            st.success("Resultados guardados (solo en tu sesi√≥n).")
    else:
        st.error("‚ùå El CSV no tiene las columnas esperadas.")

# -----------------------------
# Mostrar resultados del usuario
# -----------------------------
if not st.session_state.resultados.empty:
    df_total = st.session_state.resultados.copy()

    st.subheader("üìä Resultados cargados")
    st.dataframe(df_total)

    st.subheader("üèÜ Top 3 por Sharpe Ratio")
    top3 = df_total.sort_values("Sharpe", ascending=False).head(3)
    st.table(top3)

    st.subheader("‚ú® Menciones Especiales")

    mas_rentable = df_total.loc[df_total["GananciaTotal"].idxmax()]
    st.write(f"**M√°s rentable:** {mas_rentable['Grupo']} con {mas_rentable['GananciaTotal']:.2f}")

    mas_seguro = df_total.loc[df_total["Riesgo"].idxmin()]
    st.write(f"**M√°s seguro:** {mas_seguro['Grupo']} con riesgo {mas_seguro['Riesgo']:.2f}")

    mas_consistente = df_total.loc[df_total["DiasArriba"].idxmax()]
    st.write(f"**M√°s consistente:** {mas_consistente['Grupo']} con {mas_consistente['DiasArriba']} d√≠as arriba")

else:
    st.info("A√∫n no has cargado resultados.")
